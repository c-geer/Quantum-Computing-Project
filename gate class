class Gate:
    def __init__(self, matrix, qubits, n_qubits):
        self.matrix = matrix
        self.qubits = qubits
        self.n_qubits = n_qubits
        self.dim = 2 ** len(qubits)
    
    def gather(self, index):
        return sum(((index >> q) & 1) << i for i, q in enumerate(self.qubits))
    
    def scatter(self, j):
        return sum(((j >> i) & 1) << q for i, q in enumerate(self.qubits))
    
    def apply(self, vector):
        result = np.zeros_like(vector, dtype=complex)
        for i in range(len(vector)):
            r = self.gather(i)
            i0 = i & ~self.scatter(r)
            for c in range(self.dim):
                j = i0 | self.scatter(c)
                result[i] += self.matrix[r, c] * vector[j]
        return result
